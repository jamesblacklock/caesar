#-----------------------------------------------------------------------------
# MurmurHash3 was written by Austin Appleby and was placed in the public
# domain. The author has disclaimed copyright to its source code.
#
# This implementation MurmurHash3 in Caesar is based on that prior work.
# (https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp)
#
# Note - The x86 and x64 versions do _not_ produce the same results, as the
# algorithms are optimized for their respective platforms. You can still
# compile and run any of them on any platform, but your performance with the
# non-native version will be less than optimal.
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# Block read - if your platform needs to do endian-swapping or can only
# handle aligned reads, do the conversion here

#=@inline=# unsafe fn getblock32(p: &uint, i: isize) -> uint
    (p + i)^

#=@inline=# unsafe fn getblock64(p: &uint64, i: isize) -> uint64
    (p + i)^

#-----------------------------------------------------------------------------


#=@inline=# fn rotl32(x: uint, r: int8) -> uint
    (x << r as uint) | (x >> (32 - r as uint))

#=@inline=# fn rotl64(x: uint64, r: int8) -> uint64
    (x << r as uint64) | (x >> (64 - r as uint64))

#=@inline=# fn fmix32(mut h: uint) -> uint
    h ^= h >> 16
    h *= 0x85ebca6b
    h ^= h >> 13
    h *= 0xc2b2ae35
    h ^= h >> 16
    return h

#=@inline=# fn fmix64(mut k: uint64) -> uint64
    k ^= k >> 33
    k *= 0xff51afd7ed558ccd
    k ^= k >> 33
    k *= 0xc4ceb9fe1a85ec53
    k ^= k >> 33
    return k




# @test
# unsafe fn test_MurmurHash3_x86_32() -> bool
#     let key = "O, she misused me past the endurance of a block!!"
#     let expectedHash: uint = 1292149900
#     let mut hash: uint = 0
    
#     MurmurHash3_x86_32(key->data() as &void, key.size as uint - 1, 1, &mut hash)
    
#     return hash == expectedHash

pub unsafe fn MurmurHash3_x86_32(key: &void, len: uint, seed: uint, out: &mut void)
    let data = key as &uint8
    let nblocks = (len / 4) as isize
    
    let mut h1 = seed
    
    let c1: uint = 0xcc9e2d51
    let c2: uint = 0x1b873593
    
    let blocks = (data + nblocks*4) as &uint
    
    # for i in -nblocks..<0
    let mut i = -nblocks
    while i < 0
        let mut k1 = getblock32(blocks, i)
        
        k1 *= c1
        k1 = rotl32(k1, 15)
        k1 *= c2
        
        h1 ^= k1
        h1 = rotl32(h1, 13)
        h1 = h1 * 5 + 0xe6546b64
        #---
        i += 1
    
    let tail = (data + nblocks*4) as &uint8
    
    let mut k1: uint = 0
    
    # match len & 3
        # case 3
    let b = len & 3
    if b == 3
            k1 ^= (tail + 2)^ << 16
    if b >= 2
        # case 2
            k1 ^= (tail + 1)^ << 8
    if b >= 1
        # case 1
            k1 ^= tail^
            k1 *= c1, k1 = rotl32(k1, 15), k1 *= c2
            h1 ^= k1
        # else
        #     void
    
    h1 ^= len
    h1 = fmix32(h1)
    (out as &mut uint)^ = h1




# @test
# unsafe fn test_MurmurHash3_x86_128() -> bool
#     let key = "To be or not to be; THAT is the question."
#     let expectedHash: [uint64 * 2] = [15477012313004019722, 6472313844439364959]
#     let mut hash: [uint64 * 2] = [0, 0]
    
#     MurmurHash3_x86_128(key->data() as &void, key.size as uint - 1, 1, &mut hash)
    
#     return hash[0] == expectedHash[0] and hash[1] == expectedHash[1]

pub unsafe fn MurmurHash3_x86_128(key: &void, len: uint, seed: uint, out: &mut void)
    let data = key as &uint8
    let nblocks = (len / 16) as isize
    
    let mut h1 = seed
    let mut h2 = seed
    let mut h3 = seed
    let mut h4 = seed

    let c1: uint = 0x239b961b
    let c2: uint = 0xab0e9789
    let c3: uint = 0x38b34ae5
    let c4: uint = 0xa1e38b93
    
    let blocks = (data + nblocks*16) as &uint
    
    # for i in -nblocks..<0
    let mut i = -nblocks
    while i < 0
        let mut k1 = getblock32(blocks, i * 4 + 0)
        let mut k2 = getblock32(blocks, i * 4 + 1)
        let mut k3 = getblock32(blocks, i * 4 + 2)
        let mut k4 = getblock32(blocks, i * 4 + 3)

        k1 *= c1
        k1 = rotl32(k1, 15)
        k1 *= c2
        h1 ^= k1
        
        h1 = rotl32(h1, 19)
        h1 += h2
        h1 = h1 * 5 + 0x561ccd1b
        
        k2 *= c2
        k2 = rotl32(k2, 16)
        k2 *= c3
        h2 ^= k2;
        
        h2 = rotl32(h2, 17)
        h2 += h3
        h2 = h2 * 5 + 0x0bcaa747
        
        k3 *= c3
        k3 = rotl32(k3, 17)
        k3 *= c4
        h3 ^= k3
        
        h3 = rotl32(h3,15)
        h3 += h4
        h3 = h3*5+0x96cd1c35
        
        k4 *= c4
        k4 = rotl32(k4, 18)
        k4 *= c1
        h4 ^= k4;
        
        h4 = rotl32(h4, 13)
        h4 += h1
        h4 = h4 * 5 + 0x32ac3b17
        #---
        i += 1
    
    let tail = (data + nblocks*16) as &uint8
    
    let mut k1: uint = 0
    let mut k2: uint = 0
    let mut k3: uint = 0
    let mut k4: uint = 0

    # match len & 15
    let b = len & 15
        # case 15:
    if b == 15
            k4 ^= (tail + 4)^ << 16
        # case 14:
    if b >= 14
            k4 ^= (tail + 3)^ << 8
        # case 13:
    if b >= 13
            k4 ^= (tail + 2)^ << 0
            k4 *= c4
            k4  = rotl32(k4, 18)
            k4 *= c1
            h4 ^= k4
        
        # case 12:
    if b >= 12
            k3 ^= (tail + 1)^ << 24
        # case 11:
    if b >= 11
            k3 ^= (tail + 0)^ << 16
        # case 10:
    if b >= 10
            k3 ^= (tail + 9)^ << 8
        # case 9:
    if b >= 9
            k3 ^= (tail + 8)^ << 0
            k3 *= c3
            k3  = rotl32(k3, 17)
            k3 *= c4
            h3 ^= k3
        
        # case 8:
    if b >= 8
            k2 ^= (tail + 7)^ << 24
        # case 7:
    if b >= 7
            k2 ^= (tail + 6)^ << 16
        # case 6:
    if b >= 6
            k2 ^= (tail + 5)^ << 8
        # case 5:
    if b >= 5
            k2 ^= (tail + 4)^ << 0
            k2 *= c2
            k2  = rotl32(k2, 16)
            k2 *= c3
            h2 ^= k2
        
        # case 4:
    if b >= 4
            k1 ^= (tail + 3)^ << 24
        # case 3:
    if b >= 3
            k1 ^= (tail + 2)^ << 16
        # case 2:
    if b >= 2
            k1 ^= (tail + 1)^ << 8
        # case 1:
    if b >= 1
            k1 ^= (tail + 0)^ << 0
            k1 *= c1
            k1  = rotl32(k1, 15)
            k1 *= c2
            h1 ^= k1
        # else
            # void
    
    h1 ^= len
    h2 ^= len
    h3 ^= len
    h4 ^= len
    
    h1 += h2; h1 += h3; h1 += h4
    h2 += h1; h3 += h1; h4 += h1
    
    h1 = fmix32(h1)
    h2 = fmix32(h2)
    h3 = fmix32(h3)
    h4 = fmix32(h4)
    
    h1 += h2; h1 += h3; h1 += h4
    h2 += h1; h3 += h1; h4 += h1
    
    (out as &mut uint + 0)^ = h1
    (out as &mut uint + 1)^ = h2
    (out as &mut uint + 2)^ = h3
    (out as &mut uint + 3)^ = h4




# @test
# unsafe fn test_MurmurHash3_x64_128() -> bool
#     let key = "Is this a dagger which I see before me? The handle toward my hand?? Come, let me clutch thee!!"
#     let expectedHash: [uint64 * 2] = [1578671598674234516, 8165211537893185768]
#     let mut hash: [uint64 * 2] = [0, 0]
    
#     MurmurHash3_x64_128(key->data() as &void, key.size as uint - 1, 1, &mut hash)
    
#     return hash[0] == expectedHash[0] and hash[1] == expectedHash[1]

pub unsafe fn MurmurHash3_x64_128(key: &void, len: uint, seed: uint, out: &mut void)
    let data = key as &uint8
    let nblocks = (len / 16) as isize
    
    let mut h1: uint64 = seed
    let mut h2: uint64 = seed

    let c1: uint64 = 0x87c37b91114253d5
    let c2: uint64 = 0x4cf5ad432745937f
    
    let blocks = data as &uint64
    
    # for i in 0..<nblocks
    let mut i = 0
    while i < nblocks
        let mut k1 = getblock64(blocks, i * 2 + 0)
        let mut k2 = getblock64(blocks, i * 2 + 1)
        
        k1 *= c1
        k1 = rotl64(k1, 31)
        k1 *= c2
        h1 ^= k1
        
        h1 = rotl64(h1, 27)
        h1 += h2
        h1 = h1 * 5 + 0x52dce729
        
        k2 *= c2
        k2 = rotl64(k2, 33)
        k2 *= c1
        h2 ^= k2
        
        h2 = rotl64(h2, 31)
        h2 += h1
        h2 = h2 * 5 + 0x38495ab5
        
        #---
        i += 1
    
    let tail = (data + nblocks*16) as &uint8
    
    let mut k1: uint64 = 0
    let mut k2: uint64 = 0
    
    # match len & 15
    let b = len & 15
        # case 15
    if b == 15
            k2 ^= (tail + 14)^ as uint64 << 48
        # case 14
    if b >= 14
            k2 ^= (tail + 13)^ as uint64 << 40
        # case 13
    if b >= 13
            k2 ^= (tail + 12)^ as uint64 << 32
        # case 12
    if b >= 12
            k2 ^= (tail + 11)^ as uint64 << 24
        # case 11
    if b >= 11
            k2 ^= (tail + 10)^ as uint64 << 16
        # case 10
    if b >= 10
            k2 ^= (tail + 9)^ as uint64 << 8
        # case 9
    if b >= 9
            k2 ^= (tail + 8)^ as uint64 << 0
            k2 *= c2
            k2 = rotl64(k2, 33)
            k2 *= c1
            h2 ^= k2

        # case 8
    if b >= 8
            k1 ^= (tail + 7)^ as uint64 << 56
        # case 7
    if b >= 7
            k1 ^= (tail + 6)^ as uint64 << 48
        # case 6
    if b >= 6
            k1 ^= (tail + 5)^ as uint64 << 40
        # case 5
    if b >= 5
            k1 ^= (tail + 4)^ as uint64 << 32
        # case 4
    if b >= 4
            k1 ^= (tail + 3)^ as uint64 << 24
        # case 3
    if b >= 3
            k1 ^= (tail + 2)^ as uint64 << 16
        # case 2
    if b >= 2
            k1 ^= (tail + 1)^ as uint64 << 8
        # case 1
    if b >= 1
            k1 ^= (tail + 0)^ as uint64 << 0
            k1 *= c1
            k1 = rotl64(k1, 31)
            k1 *= c2
            h1 ^= k1

    h1 ^= len
    h2 ^= len

    h1 += h2
    h2 += h1

    h1 = fmix64(h1)
    h2 = fmix64(h2)

    h1 += h2
    h2 += h1

    (out as &mut uint64 + 0)^ = h1
    (out as &mut uint64 + 1)^ = h2
