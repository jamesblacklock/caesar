import libc::printf

extern "C" fn testStruct(a: Test)

struct Test
    m: float
    b: float
    x: float64

union UnionTest
    i: int
    f: float64

struct StructWithUnions
    u: UnionTest
    union
        asdf: int
        qwer: byte

unsafe fn main()
    let mut u = UnionTest {}
    
    u.i = 123
    printf("as int: %d; as float: %f\n", u.i, u.f)
    
    u.f = 123.0
    printf("as int: %d; as float: %f\n", u.i, u.f)
    
    let s: StructWithUnions = { u: { f: 5.0 }, asdf: 0x01020304 }
    let x = rrr(s, {a: 14, b: 2})
    printf("returned from rrr: { a: %d, b: %d }\n", x.a, x.b)
    
    let yy = {x: 2i64, y: 3i64, z: 4i64}
    let asdf = {a:234,b:567,c:890}
    
    let w = afaf({a: 71, b: (1,78)}.b.0, yy, {x: 17, y: 23, z: 34}, &{ty: 5})
    printf("returned from afaf: { x: %d, y: %d, z: %d }\n", w.x, w.y, w.z)
    
    testStruct({ m: 1.5, b: 3.0, x: 4.5 })


unsafe fn rrr(q: StructWithUnions, p: { a: int64, b: int }) -> { a: int64, b: int }
    printf("%f; %d; %d\n", q.u.f, q.qwer, p.a * p.b)
    {a: 8148, b: 9832}

unsafe fn afaf(a: int, 
    b: struct
        x: int64
        y: int64
        z: int64
    qq: { x: int64
        y: int64, z: int64 }
    c: &struct {ty: int}) -> { x: int64, y: int64, z: int64 }
    printf("received: %d, { x: %d, y: %d, z: %d }, { x: %d, y: %d, z: %d }, %d\n", 
        a, b.x, b.y, b.z, qq.x, qq.y, qq.z, c^.ty)
    {x:1,y:2,z:3}
