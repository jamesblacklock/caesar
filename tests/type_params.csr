import libc::printf

struct S[type T, int U]
    t: T

impl S
    fn u(self: &S) -> int
        U
        S::U
    
    fn set_t(self: &S, t: T)
        self^.t = t

fn generic[type T](t: T) -> T
    t + 1

fn main()
    let v: S[str, 511] = S { t: "hello" }
    let w = S::[int, 511] { t: generic::[int](42) }
    
    unsafe
        printf("%s, %d\n", v.t->data(), v->u())
        printf("%d, %d\n", w.t, w->u())
    
    v->set_t("goodbye!")
    w->set_t(123)
    
    unsafe
        printf("%s\n", v.t->data())
        printf("%d\n", w.t)