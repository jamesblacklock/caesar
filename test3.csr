@ffi("C")
extern unsafe fn printf(fmt: &byte, ...) -> int

@ffi("C")
extern unsafe fn getchar() -> int

@ffi("C")
extern unsafe fn malloc(size: usize) -> owned(malloc, free) &mut byte

@ffi("C")
extern unsafe fn free(buf: owned(malloc, free) &byte) -> &byte

fn fib(n: int) -> int
	if n <= 1
		return n
	else
		return fib(n - 1) + fib(n - 2)

fn main(argc: int, argv: &&byte) -> int
	unsafe printf("What is your name? ")
	
	let size: usize = 128
	let buf = unsafe malloc(size)
	let mut pt = borrow buf
	
	let mut i = 1usz, while {let j=i, i=i+1, j} <= size # for _ in 1...size
		let c = unsafe getchar() as char
		if c == '\n'
			pt^ = 0x0
			break
		else if c == 'a'
			continue
		pt^ = c as byte
		pt += 1
	
	unsafe printf("%s, %s\n"; "Hello" as &byte; borrow buf)
	
	unsafe
		let mut asdf = 4
		loop {
			printf("%d\n", asdf);
			asdf = asdf-1;
			if asdf == 0 { break; }
		}
		
		printf("%d %d %d %d %d %d %d %d %d %d\n"
			fib(1), fib(2), fib(3), fib(4), fib(5)
			fib(6), fib(7), fib(8), fib(9), fib(10))
		
		printf("\n");
		free(buf)
	
	return 0